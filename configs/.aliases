# alias name='command'
alias hpl='(cd ~/.dotfiles; git pull)'
alias hst='(cd ~/.dotfiles; git status)'
alias hig='(cd ~/.dotfiles; tig)'
# hps() See below
alias ea='vim ~/.aliases'                                                 # Open alias file
alias sa='source ~/.aliases && echo "Aliases sourced  --ok."'             # Source alias file
alias ep='subl ~/.bash_prompt &'                                          # Open promp file
alias sp='source ~/.bash_prompt && echo "Prompt sourced  --ok."'          # Source prompt file
alias es='subl ~/.autoscripts &'                                          # Open autoscripts file
alias ss='source ~/.autoscripts && echo "Scripts sourced  --ok."'         # Source autoscripts file
alias eh='vim + ~/.zsh_history'                                           # Open history file
alias runscripts='~/.manualscripts'                                       # run .term_manualscripts

alias sudo='sudo '
# sua() see below
alias applications='cd /usr/share/applications && ls'
alias explore='nautilus . &'
alias exp='nautilus . &'
alias claer='clear; echo You spelt \"clear\" wrong, dumbass'
alias sudoexplore='sudo nautilus . &'
alias sudoexp='sudo nautilus . &'
alias LASTCMD='(cat $HISTFILE | tail -n 1)'
alias please='sudo LASTCMD'
alias fuck='sudo LASTCMD'
alias fuckoff='sudo LASTCMD'
alias fuckyou='sudo LASTCMD'
alias fucking='sudo '
alias ssubl='sudo subl'
alias svim='sudo vim'
alias lastmem='valgrind --tool=memcheck --leak-check=full LASTCMD'
alias showme='apt list --upgradable'
alias py2='python'
alias py3='python3'
alias py='python3'
alias pip='py -m pip'
alias fd='fdfind'
alias apps='sudo nautilus /usr/bin'
alias dapps='sudo nautilus /usr/share/applications'
alias venv='virtualenv --python=python3 venv'
alias stop='deactivate'
alias deactivatePrompt='mv ~/.bash_prompt ~/.bash_prompt_off'
alias activatePrompt='mv ~/.bash_prompt_off ~/.bash_prompt'
alias COMPILE="(cd ~/cs3231/asst3-src/kern/compile/ASST3; bmake && bmake install)"
alias DCOMPILE="(cd ~/cs3231/asst3-src/kern/compile/ASST3; bmake depend && bmake && bmake install)"

# h4x
alias fault="dmesg -T | tail | grep segfault"
alias objdump="objdump -M intel"
alias wgcc="gcc -m32 -no-pie -fno-stack-protector"  # to compile 6447 binaries
# bof() see below
# binfo() see below

# Git commands
alias gpl='git pull'
alias gps='git push'
alias gpsu='git push -u origin $(git branch --show-current)'
alias gpsf='git push --force-with-lease'
alias gfc='git fetch'
alias gfcpl='gfc; gpl'
alias gck='git checkout'
alias gckm='git checkout master'
alias ga='git add'
alias gs='git status'
alias gc='git commit -m'
alias gcs='git commit -S -m'
alias gd='git diff'
alias gdn='git diff --name-only'

# Stops the dreaded __py_cache__ folder
export PYTHONDONTWRITEBYTECODE=1

bof() {
    cyclic -l `cyclic 200 | strace ./$1 3>&1 1>&2 2>&3 3>&- | grep si_addr | sed -E 's/.*si_addr=(.*)}.*/\1/g'`
}

binfo() {
    NC='\033[1;0m'
    RED='\033[1;31m'
    GREEN='\033[1;32m'
    YELLOW='\033[1;33m'
    PURPLE='\033[1;35m'
    WHITE='\033[1;37m'
    pwnme=$1
    checksec ${pwnme}
    paste <(echo "${WHITE}FUNCTIONS/SYMBOLS${NC}"; rabin2 -qs ${pwnme} | egrep -ve ' (0|1) ' -e imp -e ' _' | sort -k 1) /dev/null <(echo "${GREEN}STRINGS${NC}"; rabin2 -z ${pwnme}) | column -s $'\t' -tn
    echo "${YELLOW}LIBRARY FUNCTIONS${NC}"
    echo "${RED}Pwnable:${NC}"
    rabin2 -i ${pwnme} | egrep '(gets|scanf|strcpy|strcat|strncat|malloc|system)' | cut -c5- | sed 's/scanf/scanf (one-byte overflow if field width is equal to buffer length)/' | sed 's/malloc/malloc (probably heap pwnable)/' | sed 's/system/system (probably a win function!!!)/'
    echo "${PURPLE}Leakable:${NC}"; rabin2 -i ${pwnme} | egrep '(read|strncpy|memcpy)' | cut -c5-
}

#start python envs
pygo() {
    if [ -z $1 ]; then # empty string
        DEFAULT='venv'
    else
        DEFAULT=$1
    fi
    source $DEFAULT/bin/activate
}

gogogadget() {
    pygo $1
}

pregister() {
    if [ -z $1 ]; then # empty string
        echo Enter a file name
    else
        echo
        # sudo subl /usr/bin/$1  --command "{echo Text to be in the editor}"
    fi
    sudo nautilus /usr/bin &
}

picon() {
    if [ -z $1 ]; then # empty string
        echo Enter a file name
    else
        echo
        # sudo subl /usr/share/applications/$1  --command "{echo Text to be in the editor}"
    fi
    sudo nautilus /usr/share/applications &
}

# move up by any number of directories
up() {
    if [ -z $1 ]; then
        echo "cd .."
        cd ..
        return 0
    fi
    COUNTER=$1
    if [[ $COUNTER =~ ^[\-0-9]+$ ]] && (( COUNTER > 0)); then
        while [[ $COUNTER -gt 0 ]]; do
            UP="${UP}../"
            COUNTER=$(( $COUNTER -1 ))
        done
        echo "cd $UP"
        cd $UP
        UP=''
        return 0
    else
        echo 'Usage: up <n>'
        return 1
    fi
}

command_exists() {
    command -v $@ >/dev/null 2>&1
}

sua() {
    declare -A pkm;
    pkm[yum]="yum update -y; yum clean all"
    pkm[aptitude]="aptitude update; aptitude upgrade -y" # aptitude must come before apt
    pkm[apt]="apt update; apt upgrade -y; apt autoremove -y"
    pkm[powerpill]="powerpill -Syu --noconfirm; pacman -Sc --noconfirm"
    pkm[pacman]="pacman -Syu --noconfirm; pacman -Sc --noconfirm"  # powerpill must come before pacman
    pkm[zypp]="zypp refresh -y; zypp update -y; zypp packages --unneeded"
    pkm[emerge]="emerge --sync; emerge --update --deep --with-bdeps=y @world"

    # This is ZSH syntax for looping... Will not work with bash
    for k v in ${(kv)pkm[@]}; do
        if command_exists $k; then
            echo Using command $v
            command=("${(@s/; /)v}")
            for x in ${command[@]}; do
               echo sudo $x
               sudo $(echo $x)
            done
            return
        fi
    done
    echo Update command not known. Set for sua\(\) in .aliases
}

# alias hps='(cd ~/.dotfiles; git add .; git commit -m "alias update"; git push)'
hps() (
    cd ~/.dotfiles
    if [ $# -eq 0 ]; then
        git push
        return
    fi
    if [ $# -ne 1 ]; then
        echo "usage:
        hps
        hps <commit message>"
        return
    fi
    if [ -z "$(git status --untracked-files=no --porcelain)" ]; then
        echo "Home config clean, no changes."
        return
    fi
    git add .
    git commit -m "$1"
    git push
    echo "Home config changes pushed."
)

